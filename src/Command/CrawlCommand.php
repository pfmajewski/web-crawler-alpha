<?php

namespace App\Command;

use App\Model\Option;
use App\Service\Crawler;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\HttpClient\CurlHttpClient;
use Symfony\Component\Validator\Constraints\Url;
use Symfony\Component\Validator\Validator\ValidatorInterface;

/**
 * Class CrawlCommand
 */
class CrawlCommand extends Command
{
    protected static $defaultName = 'app:crawl';

    /**
     * @var Crawler
     */
    private $crawler;

    /**
     * @var ValidatorInterface
     */
    private $validator;

    /**
     * CrawlCommand constructor.
     *
     * @param Crawler            $crawler
     * @param ValidatorInterface $validator
     */
    public function __construct(Crawler $crawler, ValidatorInterface $validator)
    {
        parent::__construct();
        $this->crawler = $crawler;
        $this->validator = $validator;
    }

    /**
     * Command configuration
     */
    protected function configure()
    {
        $this
            ->setDescription('Crawls given url for products options')
            ->addArgument('url', InputArgument::REQUIRED, 'Url to source data')
        ;
    }

    /**
     * @param InputInterface  $input
     * @param OutputInterface $output
     *
     * @throws \InvalidArgumentException
     */
    protected function initialize(InputInterface $input, OutputInterface $output)
    {
        parent::initialize($input, $output); // TODO: Change the autogenerated stub

        $urlConstrain = new Url();
        $urlValidationErrors = $this->validator->validate($input->getArgument('url'), $urlConstrain);
        if (count($urlValidationErrors) > 0) {
            throw new \InvalidArgumentException($urlValidationErrors[0]->getMessage());
        }
    }

    /**
     * @param InputInterface  $input
     * @param OutputInterface $output
     *
     * @return int
     * @throws \Symfony\Contracts\HttpClient\Exception\ClientExceptionInterface
     * @throws \Symfony\Contracts\HttpClient\Exception\RedirectionExceptionInterface
     * @throws \Symfony\Contracts\HttpClient\Exception\ServerExceptionInterface
     * @throws \Symfony\Contracts\HttpClient\Exception\TransportExceptionInterface
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $client = new CurlHttpClient();
        $html = $client->request('GET', $input->getArgument('url'))->getContent();

        $options = $this->crawler->parse($html);
        usort($options, [Option::class, 'sortByYearlyCostDescending']);

        $output->writeln(json_encode($options));

        return 0;
    }
}
